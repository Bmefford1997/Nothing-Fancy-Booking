@model Nothing_Fancy.Models.Reservation

@{
    ViewData["Title"] = "Create";
}


<div class="container">
    <h1>Create</h1>
    <!-- This variable is for getting all the dates in our Database and putting it into a dictionary that is tied to a Room number as a key.
         With this we can disable dates that have been reserved for that Room number by calling our javascript function disableDate.-->
    @*@{var disableDatess = getDates(ViewBag.List);}
    <body onload="disableDates();"></body>*@
    <h4>Reservation</h4>
    <hr />
    <div class="row">
        <div class="col-md-4">
            <form asp-action="Create">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <div class="form-group">
                    <label asp-for="reserverName" class="control-label">Name:</label>
                    <input asp-for="reserverName" id="name" value="" class="form-control" />
                    <span asp-validation-for="reserverName" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="nameOfRoom" class="control-label">Room Select:</label>
                    <select asp-for="nameOfRoom" id="roomSelection" list="rooms" onchange="checkTextBox();" class="form-control">
                        <option value="Room 101">Room 101</option>
                        <option value="Room 102">Room 102</option>
                        <option value="Room 103">Room 103</option>
                    </select>
                    <span asp-validation-for="nameOfRoom" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="reserveDateBegin" class="control-label">Begin Date:</label>
                    <input asp-for="reserveDateBegin" type="text" id="datepickerBegin" onkeyup="checkTextBox();" onchange="checkTextBox();" class="form-control" />
                    <span asp-validation-for="reserveDateBegin" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="reserveDateEnd" class="control-label">End Date:</label>
                    <input asp-for="reserveDateEnd" type="text" id="datepickerEnd" onkeyup="checkTextBox();" onchange="checkTextBox();" class="form-control" />
                    <span asp-validation-for="reserveDateEnd" class="text-danger"></span>
                </div>

                <div class="form-group">

                    <label asp-for="cost" class="control-label">Calculated Cost: ($)</label>
                    <input asp-for="cost" id="totalCost" readonly="readonly" class="form-control" />
                    <span asp-validation-for="cost" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <input type="submit" value="Create" class="btn btn-primary" />
                </div>
            </form>
        </div>
    </div>

    <div>
        <a asp-controller="Rooms" asp-action="Listing">Back to List</a>
    </div>
</div>

@functions {
    public IDictionary<string, List<string>> getDates(List<Reservation> reservationsList)
    {
        IDictionary<string, List<string>> roomDates = new Dictionary<string, List<string>>();
        var dates = new List<String>();
        var allDates = new List<String>();
        @foreach (var item in (reservationsList))
        {
            dates = new List<String>();
            foreach (var item2 in (DateRange(item.reserveDateBegin, item.reserveDateEnd)))
            {
                allDates.Add(item2.ToString("MM/dd/yyyy"));
                dates.Add(item2.ToString("MM/dd/yyyy"));
            }
            if (roomDates.ContainsKey(item.nameOfRoom))
            {
                roomDates[item.nameOfRoom].AddRange(dates);
            }
            else
            {
                roomDates.Add(item.nameOfRoom, dates);
            }
        }
        return roomDates;
    }

    public IEnumerable<DateTime> DateRange(DateTime fromDate, DateTime toDate)
    {
        return Enumerable.Range(0, toDate.Subtract(fromDate).Days + 1)
                         .Select(d => fromDate.AddDays(d));
    }
}

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");}
<script>
        $(function () {
            $("#datepickerBegin").datepicker();
            $("#datepickerEnd").datepicker();
        });
        @*var datesToDisable = [];

        $(function () {
            $("#datepickerBegin").datepicker({
                beforeShowDay: function (date) {
                    var string = jQuery.datepicker.formatDate('mm/dd/yy', date);
                    return [datesToDisable.indexOf(string) == -1]
                }
            });
            $("#datepickerEnd").datepicker({
                beforeShowDay: function (date) {
                    var string = jQuery.datepicker.formatDate('mm/dd/yy', date);
                    return [datesToDisable.indexOf(string) == -1]
                }
            });
        });

        function disableDates() {
            var roomNum = document.getElementById("roomSelection").value;
            var roomAndDates = JSON.parse('@Html.Raw(Json.Serialize(disableDatess))');
            datesToDisable = roomAndDates[roomNum];
        }*@
</script>
}
